plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.4.5'
  id 'uk.gov.hmcts.java' version '0.12.5'
  id 'org.owasp.dependencycheck' version '6.0.2'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'org.sonarqube' version '2.8'
  id "io.freefair.lombok" version "5.1.0"
  id 'org.flywaydb.flyway' version '5.2.4'
  id "info.solidsoft.pitest" version '1.5.1'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "6.18.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
      'category/java/errorprone.xml',
      'category/java/bestpractices.xml'
  ]
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: ia-timed-event-service"
    property "sonar.projectKey", "IATIMEDEVENTSERVICE"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/timedevent/infrastructure/config/**"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

pitest {
  targetClasses = ['uk.gov.hmcts.reform.timedevent.*']
  excludedClasses = [
      'uk.gov.hmcts.reform.timedevent.infrastructure.config.*',
      'uk.gov.hmcts.reform.timedevent.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  failWhenNoMutations = false
}

project.tasks['pitest'].group = "Verification"

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      def isNonStable = { String version ->
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
          version ==~ /(?i).*[.-]\$qualifier[.\\d-+]*/
        }
      }
      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

def versions = [
    junit           : '5.6.2',
    junitPlatform   : '1.6.2',
    reformLogging   : '5.1.1',
    springBoot      : '2.4.5',
    springfoxSwagger: '2.9.2',
    serenity        : '2.0.91',
    springCloudVersion:'2020.0.2'
]

dependencyManagement {
  dependencies {
    // CVE-2019-17569, CVE-2020-1935, CVE-2020-1938
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.43') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-el'
      entry 'tomcat-embed-websocket'
    }

    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '30.0-jre') {
      entry 'guava'
    }
  }
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloudVersion}"
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
}

ext.libraries = [
    junit5: [
        "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
        "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
        "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
        "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
        "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
    ]
]

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.2'

  implementation group: 'org.flywaydb', name: 'flyway-core', version: '5.2.4'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.13'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.2.RELEASE'
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2'
  implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'

  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
  implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'

  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.23.2'
  testImplementation group: 'ru.lanwen.wiremock', name: 'wiremock-junit5', version: '1.3.1'
  testImplementation group: 'org.springframework.security', name: 'spring-security-test'

  testImplementation group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '4.0.1'

  testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.0.2'
  testImplementation group: 'com.h2database', name: 'h2', version: '1.4.197'

  testImplementation group: 'org.pitest', name: 'pitest', version: '1.5.2'

  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile sourceSets.test.runtimeClasspath

  smokeTestCompile sourceSets.main.runtimeClasspath
  smokeTestCompile sourceSets.test.runtimeClasspath

}

test {
  useJUnitPlatform()
  failFast = true
}

mainClassName = 'uk.gov.hmcts.reform.timedevent.Application'

bootJar {
  getArchiveFileName().set(provider {
    'ia-timed-event-service.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
