server:
  port: 8095

management:
  endpoint:
    health:
      show-details: "always"
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus

  health:
    probes:
      enabled: true

spring:
  application:
    name: Timed Event Service
  main:
    allow-bean-definition-overriding: true
  jackson.date-format: yyyy-MM-dd
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${IDAM_URL:http://127.0.0.1:5000}/o
        registration:
          oidc:
            client-id: ${IA_IDAM_CLIENT_ID:ia}
            client-secret: ${IA_IDAM_SECRET:something}
      resourceserver:
        jwt:
          jwk-set-uri: ${IDAM_URL:http://127.0.0.1:5000}/o/jwks
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5050}/${POSTGRES_NAME:ia_timed_event_service}${POSTGRES_CONNECTION_OPTIONS:}
    username: ${POSTGRES_USERNAME:postgres}
    password: ${POSTGRES_PASSWORD:}
    properties:
      charSet: UTF-8
    tomcat:
      max-active: 10
      max-idle: 10
      min-idle: 2
      max-wait: 10000
      test-on-borrow: true
      test-on-connect: true
      test-on-idle: true
      validation-query: "SELECT 1"
      time-between-eviction-runs-millis: 10000
      test-while-idle: true
      test-on-return: true
      remove-abandoned: true
      remove-abandoned-timeout: 60
      log-abandoned: true
      abandon-when-percentage-full: 0
  flyway:
    enabled: true
    baselineOnMigrate: true
    schemas: ${POSTGRES_NAME:ia_timed_event_service}
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
    properties:
      org:
        quartz:
          scheduler:
            instanceName: timed-event-quartz-scheduler
            instanceId: AUTO
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 4
          jobStore:
            driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
            tablePrefix: ia_timed_event_service.QRTZ_
            isClustered: true
            clusterCheckinInterval: 20000

retry:
  durationInSeconds: ${IA_SCHEDULER_RETRY_DURATION:1800}
  maxRetryNumber: ${IA_SCHEDULER_MAX_RETRY_NUMBER:50}

health:
  probes:
    enabled: true
  services:
    idam:
      uri: ${IDAM_URL:http://127.0.0.1:5000}/health
      response: '"status":"UP"'
    serviceAuth:
      uri: ${S2S_URL:http://127.0.0.1:4502}/health
      response: '"status":"UP"'
    ccd:
      uri: ${CCD_URL:http://127.0.0.1:4452}/health
      response: '"status":"UP"'

security:
  anonymousPaths:
    - "/"
    - "/health"
    - "/health/liveness"
    - "/health/readiness"
    - "/loggers/**"
    - "/swagger-ui.html"
    - "/swagger-resources/**"
    - "/v2/api-docs"
    - "/webjars/springfox-swagger-ui/**"
    - "/favicon.ico"
    - "/csrf"
    - "/testing-support/**"
  roleEventAccess:
    caseworker-ia-caseofficer:
    - "requestHearingRequirementsFeature"
    - "paymentPendingFeature"
    - "example"
    - "unknown"

auth.provider.service.client.baseUrl: ${S2S_URL:http://127.0.0.1:4502}

idam:
  baseUrl: ${IDAM_URL:http://127.0.0.1:5000}
  redirectUrl: ${IA_IDAM_REDIRECT_URI:http://localhost:3002/oauth2/callback}
  system:
    username: ${IA_SYSTEM_USERNAME:ia-system-user@fake.hmcts.net}
    password: ${IA_SYSTEM_PASSWORD:London05}
    scope: "openid profile roles"
  s2s-auth:
    totp_secret: ${IA_S2S_SECRET:AAAAAAAAAAAAAAAC}
    microservice: ${IA_S2S_MICROSERVICE:ia}
    url: ${S2S_URL:http://127.0.0.1:4502}
  s2s-authorised:
    services: ${IA_S2S_AUTHORIZED_SERVICES:iac}


ccd:
  case-data-api:
    url: ${CCD_URL:http://127.0.0.1:4452}
